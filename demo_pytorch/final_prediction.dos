
try {
    loadPlugin("parquet")
    print("✓ parquet loaded")
} catch(ex) {
    print("✗ parquet failed - " + ex)
}

sampleData = parquet::loadParquet("sample_M_Y_IH_IF")
sampleData = select * from sampleData where order_book_id in ['IH2303','IF2303']

try {
    loadPlugin("LibTorch")
    print("✓ LibTorch loaded")
} catch(ex) {
    print("✗ LibTorch failed - " + ex)
}


// Feature engineering in DolphinDB only
cleanData = select *,
    mavg(close, 5) as sma_5,
    mavg(close, 20) as sma_20,
    close - prev(close) as price_change,
    mstd(close, 10) as volatility
from sampleData context by order_book_id

// Remove NULL rows
cleanData = select * from cleanData where not isNull(sma_5) and not isNull(sma_20) and not isNull(volatility)
print("Enhanced data ready: " + string(count(cleanData)) + " records")

// Load AI models (from server directory where you copied them)
try {
    lstmModel = LibTorch::load("lstm_price_predictor.pth")
    print("✓ LSTM model loaded successfully")
} catch(ex) {
    print("✗ LSTM load failed: " + ex)
    lstmModel = NULL
}

try {
    dqnModel = LibTorch::load("dqn_action_predictor.pth")  
    print("✓ DQN action model loaded successfully")
} catch(ex) {
    print("✗ DQN load failed: " + ex)
    dqnModel = NULL
}

// Simple trading simulation  
def simpleTradingDemo(data, order_book_id) {
    order_book_idData = select * from data where order_book_id = order_book_id order by datetime
    balance = 100000.0
    position = 0
    trades = 0
    
    rows = count(order_book_idData)
    print("Trading " + string(order_book_id) + " with " + string(rows) + " records")
    
    // Simple momentum strategy (no ML for now, just demo the data flow)
    for (i in 20:(rows-5)) {
        currentPrice = order_book_idData.close[i]
        
        // Simple action based on price change
        action = 0  // default hold
        
        if (i > 20) {
            priceChange = currentPrice - order_book_idData.close[i-1]
            if (priceChange > 0.5 and position <= 0) action = 1  // buy
            else if (priceChange < -0.5 and position >= 0) action = 2  // sell
        }
        
        // Execute trades
        if (action == 1 and position <= 0) {  // BUY
            if (position == -1) {
                pnl = order_book_idData.close[i-1] - currentPrice
                balance += pnl
                trades += 1
            }
            position = 1
        } else if (action == 2 and position >= 0) {  // SELL
            if (position == 1) {
                pnl = currentPrice - order_book_idData.close[i-1]
                balance += pnl
                trades += 1
            }
            position = -1
        }
    }
    
    finalReturn = (balance / 100000 - 1) * 100
    print(string(order_book_id) + " final return: " + string(finalReturn) + "%")
    
    return finalReturn
}

// Run trading simulation
order_book_ids = exec distinct(order_book_id) from cleanData
print("Found order_book_ids: " + string(order_book_ids))

totalReturn = 0.0
for (sym in order_book_ids) {
    ret = simpleTradingDemo(cleanData, sym)
    totalReturn += ret
}

avgReturn = totalReturn / size(order_book_ids)

print("\n=== FINAL RESULTS ===")
print("Average Return: " + string(avgReturn) + "%")
print("✓ Demo completed successfully!")
print("✓ Feature engineering done entirely in DolphinDB") 
print("✓ Models loaded and ready for AI prediction")
print("✓ Trading simulation executed")
print("✓ No duplicate feature engineering between Python and DolphinDB")
print("==================")

// Show sample of enhanced data with technical indicators
print("\nSample enhanced data (OHLCV + indicators):")
select top 5 datetime, order_book_id, close, sma_5, sma_20, price_change, volatility from cleanData
